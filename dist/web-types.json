{
  "$schema": "http://json.schemastore.org/web-types",
  "name": "@lynk-design/lynk",
  "version": "1.0.0-beta.12",
  "description-markup": "markdown",
  "framework-config": {
    "enable-when": {
      "node-packages": [
        "@lynk-design/lynk"
      ]
    }
  },
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "lynk-accordion",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-accordion",
          "js": {
            "properties": [
              {
                "name": "accordion",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "header",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "body",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "open",
                "description": "Indicates whether or not the accordion is open. You can use this in lieu of the show/hide methods.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "summary",
                "description": "The summary to show in the accordion header. If you need to display HTML, use the `summary` slot instead.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the accordion so it can't be toggled.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "show",
                "description": "Shows the accordion.",
                "value": {}
              },
              {
                "name": "hide",
                "description": "Hides the accordion",
                "value": {}
              },
              {
                "name": "handleSummaryClick",
                "value": {}
              },
              {
                "name": "handleSummaryKeyDown",
                "value": {}
              },
              {
                "name": "handleOpenChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:show",
                "description": "Emitted when the accordion opens."
              },
              {
                "name": "after:show",
                "description": "Emitted after the accordion opens and all animations are complete."
              },
              {
                "name": "on:hide",
                "description": "Emitted when the accordion closes."
              },
              {
                "name": "after:hide",
                "description": "Emitted after the accordion closes and all animations are complete."
              }
            ]
          },
          "attributes": [
            {
              "name": "open",
              "description": "Indicates whether or not the accordion is open. You can use this in lieu of the show/hide methods.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "summary",
              "description": "The summary to show in the accordion header. If you need to display HTML, use the `summary` slot instead.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the accordion so it can't be toggled.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-alert",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-alert",
          "js": {
            "properties": [
              {
                "name": "autoHideTimeout",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "hasSlotController",
                "value": {}
              },
              {
                "name": "base",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "open",
                "description": "Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "closable",
                "description": "Makes the alert closable.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "type",
                "description": "The alert's type (color).",
                "value": {
                  "type": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
                }
              },
              {
                "name": "duration",
                "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.",
                "value": {}
              },
              {
                "name": "show",
                "description": "Shows the alert.",
                "value": {}
              },
              {
                "name": "hide",
                "description": "Hides the alert",
                "value": {}
              },
              {
                "name": "toast",
                "description": "Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when\ndismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by\ncalling this method again. The returned promise will resolve after the alert is hidden.",
                "value": {}
              },
              {
                "name": "restartAutoHide",
                "value": {}
              },
              {
                "name": "handleCloseClick",
                "value": {}
              },
              {
                "name": "handleMouseMove",
                "value": {}
              },
              {
                "name": "handleOpenChange",
                "value": {}
              },
              {
                "name": "handleDurationChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:show",
                "description": "Emitted when the alert opens."
              },
              {
                "name": "after:show",
                "description": "Emitted after the alert opens and all animations are complete."
              },
              {
                "name": "on:hide",
                "description": "Emitted when the alert closes."
              },
              {
                "name": "after:hide",
                "description": "Emitted after the alert closes and all animations are complete."
              }
            ]
          },
          "attributes": [
            {
              "name": "open",
              "description": "Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "closable",
              "description": "Makes the alert closable.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "type",
              "description": "The alert's type (color).",
              "value": {
                "type": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              }
            },
            {
              "name": "duration",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.",
              "value": {}
            }
          ]
        },
        {
          "name": "lynk-box",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-box",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "name": "lynk-badge",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-badge",
          "js": {
            "properties": [
              {
                "name": "type",
                "description": "The badge's variant.",
                "value": {
                  "type": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
                }
              },
              {
                "name": "pill",
                "description": "Draws a pill-style badge with rounded edges.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "pulse",
                "description": "Makes the badge pulsate to draw attention.",
                "value": {
                  "type": "boolean"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "type",
              "description": "The badge's variant.",
              "value": {
                "type": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              }
            },
            {
              "name": "pill",
              "description": "Draws a pill-style badge with rounded edges.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "pulse",
              "description": "Makes the badge pulsate to draw attention.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-animation",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-animation",
          "js": {
            "properties": [
              {
                "name": "animation",
                "value": {
                  "type": "Animation | undefined"
                }
              },
              {
                "name": "hasStarted",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "defaultSlot",
                "value": {
                  "type": "Promise<HTMLSlotElement>"
                }
              },
              {
                "name": "name",
                "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "play",
                "description": "Plays the animation. When omitted, the animation will be paused. This prop will be automatically removed when the\nanimation finishes or gets canceled.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "delay",
                "description": "The number of milliseconds to delay the start of the animation.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "direction",
                "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.",
                "value": {
                  "type": "PlaybackDirection"
                }
              },
              {
                "name": "duration",
                "description": "The number of milliseconds each iteration of the animation takes to complete.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "easing",
                "description": "The easing function to use for the animation. This can be a Lynk easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "endDelay",
                "description": "The number of milliseconds to delay after the active period of an animation sequence.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "fill",
                "description": "Sets how the animation applies styles to its target before and after its execution.",
                "value": {
                  "type": "FillMode"
                }
              },
              {
                "name": "iterations",
                "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
                "value": {}
              },
              {
                "name": "iterationStart",
                "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "keyframes",
                "description": "The keyframes to use for the animation. If this is set, `name` will be ignored.",
                "value": {
                  "type": "Keyframe[] | undefined"
                }
              },
              {
                "name": "playbackRate",
                "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "currentTime",
                "description": "Gets and sets the current animation time.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "handleAnimationChange",
                "value": {}
              },
              {
                "name": "handleAnimationFinish",
                "value": {}
              },
              {
                "name": "handleAnimationCancel",
                "value": {}
              },
              {
                "name": "handlePlayChange",
                "value": {}
              },
              {
                "name": "handlePlaybackRateChange",
                "value": {}
              },
              {
                "name": "handleSlotChange",
                "value": {}
              },
              {
                "name": "createAnimation",
                "value": {}
              },
              {
                "name": "destroyAnimation",
                "value": {}
              },
              {
                "name": "cancel",
                "description": "Clears all KeyframeEffects caused by this animation and aborts its playback.",
                "value": {}
              },
              {
                "name": "finish",
                "description": "Sets the playback time to the end of the animation corresponding to the current playback direction.",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:cancel",
                "description": "Emitted when the animation is canceled."
              },
              {
                "name": "on:finish",
                "description": "Emitted when the animation finishes."
              },
              {
                "name": "on:start",
                "description": "Emitted when the animation starts or restarts."
              }
            ]
          },
          "attributes": [
            {
              "name": "name",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "play",
              "description": "Plays the animation. When omitted, the animation will be paused. This prop will be automatically removed when the\nanimation finishes or gets canceled.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "delay",
              "description": "The number of milliseconds to delay the start of the animation.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "direction",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.",
              "value": {
                "type": "PlaybackDirection"
              }
            },
            {
              "name": "duration",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "easing",
              "description": "The easing function to use for the animation. This can be a Lynk easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "end-delay",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "fill",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "value": {
                "type": "FillMode"
              }
            },
            {
              "name": "iterations",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
              "value": {}
            },
            {
              "name": "iteration-start",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "playback-rate",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
              "value": {
                "type": "number"
              }
            }
          ]
        },
        {
          "description": "Gets a list of all supported animation names.",
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "description": "Gets a list of all supported easing function names.",
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "name": "lynk-button-group",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-button-group",
          "js": {
            "properties": [
              {
                "name": "defaultSlot",
                "value": {
                  "type": "HTMLSlotElement"
                }
              },
              {
                "name": "label",
                "description": "A label to use for the button group's `aria-label` attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleMouseOver",
                "value": {}
              },
              {
                "name": "handleMouseOut",
                "value": {}
              },
              {
                "name": "handleSlotChange",
                "value": {}
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "label",
              "description": "A label to use for the button group's `aria-label` attribute.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "lynk-checkbox",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-checkbox",
          "js": {
            "properties": [
              {
                "name": "input",
                "value": {
                  "type": "HTMLInputElement"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "name",
                "description": "The checkbox's name attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "description": "The checkbox's value attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the checkbox.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "required",
                "description": "Makes the checkbox a required field.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "checked",
                "description": "Draws the checkbox in a checked state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "indeterminate",
                "description": "Draws the checkbox in an indeterminate state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "invalid",
                "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "click",
                "description": "Simulates a click on the checkbox.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the checkbox.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the checkbox.",
                "value": {}
              },
              {
                "name": "reportValidity",
                "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleStateChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:blur",
                "description": "Emitted when the control loses focus."
              },
              {
                "name": "on:change",
                "description": "Emitted when the control's checked state changes."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the control gains focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "name",
              "description": "The checkbox's name attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The checkbox's value attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the checkbox.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "required",
              "description": "Makes the checkbox a required field.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "checked",
              "description": "Draws the checkbox in a checked state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "indeterminate",
              "description": "Draws the checkbox in an indeterminate state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-dialog",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-dialog",
          "js": {
            "properties": [
              {
                "name": "dialog",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "panel",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "overlay",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "hasSlotController",
                "value": {}
              },
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "modal",
                "value": {
                  "type": "Modal"
                }
              },
              {
                "name": "originalTrigger",
                "value": {
                  "type": "HTMLElement | null"
                }
              },
              {
                "name": "open",
                "description": "Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "label",
                "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "noHeader",
                "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the dialog.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "show",
                "description": "Shows the dialog.",
                "value": {}
              },
              {
                "name": "hide",
                "description": "Hides the dialog",
                "value": {}
              },
              {
                "name": "requestClose",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              },
              {
                "name": "handleOpenChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:show",
                "description": "Emitted when the dialog opens."
              },
              {
                "name": "after:show",
                "description": "Emitted after the dialog opens and all animations are complete."
              },
              {
                "name": "on:hide",
                "description": "Emitted when the dialog closes."
              },
              {
                "name": "after:hide",
                "description": "Emitted after the dialog closes and all animations are complete."
              },
              {
                "name": "on:initial-focus",
                "description": "Emitted when the dialog opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input."
              },
              {
                "name": "on:request-close",
                "description": "Emitted when the user attempts to close the dialog by clicking the close button, clicking the overlay, or pressing escape. Calling `event.preventDefault()` will keep the dialog open. Avoid using this unless closing the dialog will result in destructive behavior such as data loss."
              }
            ]
          },
          "attributes": [
            {
              "name": "open",
              "description": "Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "label",
              "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "no-header",
              "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the dialog.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-button",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-button",
          "js": {
            "properties": [
              {
                "name": "button",
                "value": {
                  "type": "HTMLButtonElement | HTMLLinkElement"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasSlotController",
                "value": {}
              },
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "color",
                "description": "The button's color.",
                "value": {
                  "type": "'default' | 'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
                }
              },
              {
                "name": "size",
                "description": "The button's size.",
                "value": {
                  "type": "'small' | 'medium' | 'large'"
                }
              },
              {
                "name": "block",
                "description": "Display the button component as a block instead of inline-block.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "caret",
                "description": "Draws the button with a caret for use with dropdowns, popovers, etc.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the button.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "thinking",
                "description": "Draws the button in a thinking state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "outline",
                "description": "Draws an outlined button.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "pill",
                "description": "Draws a pill-style button with rounded edges.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "circle",
                "description": "Draws an icon only circle button.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "square",
                "description": "Draws an icon only square button.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "type",
                "description": "The type of button. When the type is `submit`, the button will submit the surrounding form. Note that the default\nvalue is `button` instead of `submit`, which is opposite of how native `<button>` elements behave.",
                "value": {
                  "type": "'button' | 'submit'"
                }
              },
              {
                "name": "name",
                "description": "An optional name for the button. Ignored when `href` is set.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "value",
                "description": "An optional value for the button. Ignored when `href` is set.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "href",
                "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "target",
                "description": "Tells the browser where to open the link. Only used when `href` is set.",
                "value": {
                  "type": "'_blank' | '_parent' | '_self' | '_top' | undefined"
                }
              },
              {
                "name": "download",
                "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "form",
                "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "formAction",
                "description": "Used to override the form owner's `action` attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "formMethod",
                "description": "Used to override the form owner's `method` attribute.",
                "value": {
                  "type": "'post' | 'get'"
                }
              },
              {
                "name": "formNoValidate",
                "description": "Used to override the form owner's `novalidate` attribute.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "formTarget",
                "description": "Used to override the form owner's `target` attribute.",
                "value": {
                  "type": "'_self' | '_blank' | '_parent' | '_top' | string"
                }
              },
              {
                "name": "click",
                "description": "Simulates a click on the button.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the button.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the button.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:blur",
                "description": "Emitted when the button loses focus."
              },
              {
                "name": "on:click",
                "description": "Emitted when the button is clicked."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the button gains focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "color",
              "description": "The button's color.",
              "value": {
                "type": "'default' | 'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              }
            },
            {
              "name": "size",
              "description": "The button's size.",
              "value": {
                "type": "'small' | 'medium' | 'large'"
              }
            },
            {
              "name": "block",
              "description": "Display the button component as a block instead of inline-block.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "caret",
              "description": "Draws the button with a caret for use with dropdowns, popovers, etc.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the button.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "thinking",
              "description": "Draws the button in a thinking state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "outline",
              "description": "Draws an outlined button.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "pill",
              "description": "Draws a pill-style button with rounded edges.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "circle",
              "description": "Draws an icon only circle button.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "square",
              "description": "Draws an icon only square button.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "type",
              "description": "The type of button. When the type is `submit`, the button will submit the surrounding form. Note that the default\nvalue is `button` instead of `submit`, which is opposite of how native `<button>` elements behave.",
              "value": {
                "type": "'button' | 'submit'"
              }
            },
            {
              "name": "name",
              "description": "An optional name for the button. Ignored when `href` is set.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "value",
              "description": "An optional value for the button. Ignored when `href` is set.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "href",
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "target",
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "value": {
                "type": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              }
            },
            {
              "name": "download",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "form",
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "formaction",
              "description": "Used to override the form owner's `action` attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "formmethod",
              "description": "Used to override the form owner's `method` attribute.",
              "value": {
                "type": "'post' | 'get'"
              }
            },
            {
              "name": "formnovalidate",
              "description": "Used to override the form owner's `novalidate` attribute.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "formtarget",
              "description": "Used to override the form owner's `target` attribute.",
              "value": {
                "type": "'_self' | '_blank' | '_parent' | '_top' | string"
              }
            }
          ]
        },
        {
          "name": "lynk-divider",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-divider",
          "js": {
            "properties": [
              {
                "name": "vertical",
                "description": "Draws the divider in a vertical orientation.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "handleVerticalChange",
                "value": {}
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "vertical",
              "description": "Draws the divider in a vertical orientation.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-dropdown",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-dropdown",
          "js": {
            "properties": [
              {
                "name": "trigger",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "panel",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "positioner",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "positionerCleanup",
                "value": {
                  "type": "ReturnType<typeof autoUpdate> | undefined"
                }
              },
              {
                "name": "open",
                "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "placement",
                "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
                "value": {
                  "type": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the dropdown so the panel will not open.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "stayOpenOnSelect",
                "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ncontrols that allow multiple selections.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "containingElement",
                "description": "The dropdown will close when the user interacts outside of this element (e.g. clicking).",
                "value": {
                  "type": "HTMLElement | undefined"
                }
              },
              {
                "name": "distance",
                "description": "The distance in pixels from which to offset the panel away from its trigger.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "skidding",
                "description": "The distance in pixels from which to offset the panel along its trigger.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "block",
                "description": "Display the dropdown component as a block instead of inline-block.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "hoist",
                "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "focusOnTrigger",
                "value": {}
              },
              {
                "name": "getMenu",
                "value": {}
              },
              {
                "name": "handleDocumentKeyDown",
                "value": {}
              },
              {
                "name": "handleDocumentMouseDown",
                "value": {}
              },
              {
                "name": "handleMenuItemActivate",
                "value": {}
              },
              {
                "name": "handlePanelSelect",
                "value": {}
              },
              {
                "name": "handlePopoverOptionsChange",
                "value": {}
              },
              {
                "name": "handleTriggerClick",
                "value": {}
              },
              {
                "name": "handleTriggerKeyDown",
                "value": {}
              },
              {
                "name": "handleTriggerKeyUp",
                "value": {}
              },
              {
                "name": "handleTriggerSlotChange",
                "value": {}
              },
              {
                "name": "updateAccessibleTrigger",
                "value": {}
              },
              {
                "name": "show",
                "description": "Shows the dropdown panel.",
                "value": {}
              },
              {
                "name": "hide",
                "description": "Hides the dropdown panel",
                "value": {}
              },
              {
                "name": "reposition",
                "description": "Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu\nis activated.",
                "value": {}
              },
              {
                "name": "addOpenListeners",
                "value": {}
              },
              {
                "name": "removeOpenListeners",
                "value": {}
              },
              {
                "name": "handleOpenChange",
                "value": {}
              },
              {
                "name": "startPositioner",
                "value": {}
              },
              {
                "name": "updatePositioner",
                "value": {}
              },
              {
                "name": "stopPositioner",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:show",
                "description": "Emitted when the dropdown opens."
              },
              {
                "name": "after:show",
                "description": "Emitted after the dropdown opens and all animations are complete."
              },
              {
                "name": "on:hide",
                "description": "Emitted when the dropdown closes."
              },
              {
                "name": "after:hide",
                "description": "Emitted after the dropdown closes and all animations are complete."
              }
            ]
          },
          "attributes": [
            {
              "name": "open",
              "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "placement",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "value": {
                "type": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the dropdown so the panel will not open.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "stay-open-on-select",
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ncontrols that allow multiple selections.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "distance",
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "skidding",
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "block",
              "description": "Display the dropdown component as a block instead of inline-block.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "hoist",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-format-bytes",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-format-bytes",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "value",
                "description": "The number to format in bytes.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "unit",
                "description": "The unit to display.",
                "value": {
                  "type": "'byte' | 'bit'"
                }
              },
              {
                "name": "display",
                "description": "Determines how to display the result, e.g. \"100 bytes\", \"100 b\", or \"100b\".",
                "value": {
                  "type": "'long' | 'short' | 'narrow'"
                }
              },
              {
                "name": "lang",
                "description": "The locale to use when formatting the number.",
                "value": {
                  "type": "string"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "value",
              "description": "The number to format in bytes.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "unit",
              "description": "The unit to display.",
              "value": {
                "type": "'byte' | 'bit'"
              }
            },
            {
              "name": "display",
              "description": "Determines how to display the result, e.g. \"100 bytes\", \"100 b\", or \"100b\".",
              "value": {
                "type": "'long' | 'short' | 'narrow'"
              }
            },
            {
              "name": "lang",
              "description": "The locale to use when formatting the number.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "lynk-format-date",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-format-date",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "date",
                "description": "The date/time to format. If not set, the current date and time will be used.",
                "value": {
                  "type": "Date | string"
                }
              },
              {
                "name": "lang",
                "description": "The locale to use when formatting the date/time.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "weekday",
                "description": "The format for displaying the weekday.",
                "value": {
                  "type": "'narrow' | 'short' | 'long'"
                }
              },
              {
                "name": "era",
                "description": "The format for displaying the era.",
                "value": {
                  "type": "'narrow' | 'short' | 'long'"
                }
              },
              {
                "name": "year",
                "description": "The format for displaying the year.",
                "value": {
                  "type": "'numeric' | '2-digit'"
                }
              },
              {
                "name": "month",
                "description": "The format for displaying the month.",
                "value": {
                  "type": "'numeric' | '2-digit' | 'narrow' | 'short' | 'long'"
                }
              },
              {
                "name": "day",
                "description": "The format for displaying the day.",
                "value": {
                  "type": "'numeric' | '2-digit'"
                }
              },
              {
                "name": "hour",
                "description": "The format for displaying the hour.",
                "value": {
                  "type": "'numeric' | '2-digit'"
                }
              },
              {
                "name": "minute",
                "description": "The format for displaying the minute.",
                "value": {
                  "type": "'numeric' | '2-digit'"
                }
              },
              {
                "name": "second",
                "description": "The format for displaying the second.",
                "value": {
                  "type": "'numeric' | '2-digit'"
                }
              },
              {
                "name": "timeZoneName",
                "description": "The format for displaying the time.",
                "value": {
                  "type": "'short' | 'long'"
                }
              },
              {
                "name": "timeZone",
                "description": "The time zone to express the time in.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "hourFormat",
                "description": "When set, 24 hour time will always be used.",
                "value": {
                  "type": "'auto' | '12' | '24'"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "date",
              "description": "The date/time to format. If not set, the current date and time will be used.",
              "value": {
                "type": "Date | string"
              }
            },
            {
              "name": "lang",
              "description": "The locale to use when formatting the date/time.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "weekday",
              "description": "The format for displaying the weekday.",
              "value": {
                "type": "'narrow' | 'short' | 'long'"
              }
            },
            {
              "name": "era",
              "description": "The format for displaying the era.",
              "value": {
                "type": "'narrow' | 'short' | 'long'"
              }
            },
            {
              "name": "year",
              "description": "The format for displaying the year.",
              "value": {
                "type": "'numeric' | '2-digit'"
              }
            },
            {
              "name": "month",
              "description": "The format for displaying the month.",
              "value": {
                "type": "'numeric' | '2-digit' | 'narrow' | 'short' | 'long'"
              }
            },
            {
              "name": "day",
              "description": "The format for displaying the day.",
              "value": {
                "type": "'numeric' | '2-digit'"
              }
            },
            {
              "name": "hour",
              "description": "The format for displaying the hour.",
              "value": {
                "type": "'numeric' | '2-digit'"
              }
            },
            {
              "name": "minute",
              "description": "The format for displaying the minute.",
              "value": {
                "type": "'numeric' | '2-digit'"
              }
            },
            {
              "name": "second",
              "description": "The format for displaying the second.",
              "value": {
                "type": "'numeric' | '2-digit'"
              }
            },
            {
              "name": "time-zone-name",
              "description": "The format for displaying the time.",
              "value": {
                "type": "'short' | 'long'"
              }
            },
            {
              "name": "time-zone",
              "description": "The time zone to express the time in.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "hour-format",
              "description": "When set, 24 hour time will always be used.",
              "value": {
                "type": "'auto' | '12' | '24'"
              }
            }
          ]
        },
        {
          "name": "lynk-format-number",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-format-number",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "value",
                "description": "The number to format.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "lang",
                "description": "The locale to use when formatting the number.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "type",
                "description": "The formatting style to use.",
                "value": {
                  "type": "'currency' | 'decimal' | 'percent'"
                }
              },
              {
                "name": "noGrouping",
                "description": "Turns off grouping separators.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "currency",
                "description": "The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "currencyDisplay",
                "description": "How to display the currency.",
                "value": {
                  "type": "'symbol' | 'narrowSymbol' | 'code' | 'name'"
                }
              },
              {
                "name": "minimumIntegerDigits",
                "description": "The minimum number of integer digits to use. Possible values are 1 - 21.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "minimumFractionDigits",
                "description": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "maximumFractionDigits",
                "description": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "minimumSignificantDigits",
                "description": "The minimum number of significant digits to use. Possible values are 1 - 21.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "maximumSignificantDigits",
                "description": "The maximum number of significant digits to use,. Possible values are 1 - 21.",
                "value": {
                  "type": "number"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "value",
              "description": "The number to format.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "lang",
              "description": "The locale to use when formatting the number.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "type",
              "description": "The formatting style to use.",
              "value": {
                "type": "'currency' | 'decimal' | 'percent'"
              }
            },
            {
              "name": "no-grouping",
              "description": "Turns off grouping separators.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "currency",
              "description": "The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "currency-display",
              "description": "How to display the currency.",
              "value": {
                "type": "'symbol' | 'narrowSymbol' | 'code' | 'name'"
              }
            },
            {
              "name": "minimum-integer-digits",
              "description": "The minimum number of integer digits to use. Possible values are 1 - 21.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "minimum-fraction-digits",
              "description": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "maximum-fraction-digits",
              "description": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "minimum-significant-digits",
              "description": "The minimum number of significant digits to use. Possible values are 1 - 21.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "maximum-significant-digits",
              "description": "The maximum number of significant digits to use,. Possible values are 1 - 21.",
              "value": {
                "type": "number"
              }
            }
          ]
        },
        {
          "name": "lynk-grid",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-grid",
          "js": {
            "properties": [
              {
                "name": "container",
                "description": "A container of grid items",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "item",
                "description": "A singular grid item",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "direction",
                "description": "The flow direction of grid items, requries container property being set",
                "value": {
                  "type": "'row' | 'row-reverse' | 'column' | 'column-revers' | undefined"
                }
              },
              {
                "name": "justify",
                "description": "How to justify grid items, requires container property",
                "value": {
                  "type": "'start' | 'center' | 'end' | 'between' | 'around' | 'evenly' | undefined"
                }
              },
              {
                "name": "align",
                "description": "Hot to align grid items to eachother, requires container property",
                "value": {
                  "type": "'start' | 'center' | 'end' | 'stretch' | 'baseline' | undefined"
                }
              },
              {
                "name": "span",
                "description": "The width of a grid item. Requires item property  being set. This can be a single string or an array.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "gap",
                "description": "The space between grid items. Uses spacing token sizes.",
                "value": {
                  "type": "'0' | 'tiny' | '2x-small' | 'x-small' | 'small' | 'base' | 'medium' | 'large' | 'x-large' | '2x-large' | '3x-large'"
                }
              },
              {
                "name": "getBreakpointClasses",
                "value": {}
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "container",
              "description": "A container of grid items",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "item",
              "description": "A singular grid item",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "direction",
              "description": "The flow direction of grid items, requries container property being set",
              "value": {
                "type": "'row' | 'row-reverse' | 'column' | 'column-revers' | undefined"
              }
            },
            {
              "name": "justify",
              "description": "How to justify grid items, requires container property",
              "value": {
                "type": "'start' | 'center' | 'end' | 'between' | 'around' | 'evenly' | undefined"
              }
            },
            {
              "name": "align",
              "description": "Hot to align grid items to eachother, requires container property",
              "value": {
                "type": "'start' | 'center' | 'end' | 'stretch' | 'baseline' | undefined"
              }
            },
            {
              "name": "span",
              "description": "The width of a grid item. Requires item property  being set. This can be a single string or an array.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "gap",
              "description": "The space between grid items. Uses spacing token sizes.",
              "value": {
                "type": "'0' | 'tiny' | '2x-small' | 'x-small' | 'small' | 'base' | 'medium' | 'large' | 'x-large' | '2x-large' | '3x-large'"
              }
            }
          ]
        },
        {
          "name": "lynk-icon",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-icon",
          "js": {
            "properties": [
              {
                "name": "svg",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "name",
                "description": "The name of the icon to draw.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "src",
                "description": "An external URL of an SVG file.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "label",
                "description": "An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "library",
                "description": "The name of a registered custom icon library.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "getUrl",
                "value": {}
              },
              {
                "name": "setIcon",
                "value": {}
              },
              {
                "name": "handleChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:load",
                "description": "Emitted when the icon has loaded."
              },
              {
                "name": "on:error",
                "description": "Emitted when the icon fails to load due to an error."
              }
            ]
          },
          "attributes": [
            {
              "name": "name",
              "description": "The name of the icon to draw.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "src",
              "description": "An external URL of an SVG file.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "label",
              "description": "An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "library",
              "description": "The name of a registered custom icon library.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "name": "lynk-icon-button",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-icon-button",
          "js": {
            "properties": [
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "button",
                "value": {
                  "type": "HTMLButtonElement | HTMLLinkElement"
                }
              },
              {
                "name": "name",
                "description": "The name of the icon to draw.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "library",
                "description": "The name of a registered custom icon library.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "src",
                "description": "An external URL of an SVG file.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "href",
                "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "target",
                "description": "Tells the browser where to open the link. Only used when `href` is set.",
                "value": {
                  "type": "'_blank' | '_parent' | '_self' | '_top' | undefined"
                }
              },
              {
                "name": "download",
                "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
                "value": {
                  "type": "string | undefined"
                }
              },
              {
                "name": "label",
                "description": "A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\nalways include a label that describes what the icon button does.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the button.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "click",
                "description": "Simulates a click on the icon button.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the icon button.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the icon button.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:blur",
                "description": "Emitted when the icon button loses focus."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the icon button gains focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "name",
              "description": "The name of the icon to draw.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "library",
              "description": "The name of a registered custom icon library.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "src",
              "description": "An external URL of an SVG file.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "href",
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "target",
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "value": {
                "type": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              }
            },
            {
              "name": "download",
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "value": {
                "type": "string | undefined"
              }
            },
            {
              "name": "label",
              "description": "A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\nalways include a label that describes what the icon button does.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the button.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-include",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-include",
          "js": {
            "properties": [
              {
                "name": "src",
                "description": "The location of the HTML file to include.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "mode",
                "description": "The fetch mode to use.",
                "value": {
                  "type": "'cors' | 'no-cors' | 'same-origin'"
                }
              },
              {
                "name": "allowScripts",
                "description": "Allows included scripts to be executed. You must ensure the content you're including is trusted, otherwise this\noption can lead to XSS vulnerabilities in your app!",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "executeScript",
                "value": {}
              },
              {
                "name": "handleSrcChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:load",
                "description": "Emitted when the included file is loaded."
              },
              {
                "name": "on:error",
                "description": "Emitted when the included file fails to load due to an error."
              }
            ]
          },
          "attributes": [
            {
              "name": "src",
              "description": "The location of the HTML file to include.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "mode",
              "description": "The fetch mode to use.",
              "value": {
                "type": "'cors' | 'no-cors' | 'same-origin'"
              }
            },
            {
              "name": "allow-scripts",
              "description": "Allows included scripts to be executed. You must ensure the content you're including is trusted, otherwise this\noption can lead to XSS vulnerabilities in your app!",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "doc-url": "https://lynk.design/components/",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "name": "lynk-input",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-input",
          "js": {
            "properties": [
              {
                "name": "input",
                "value": {
                  "type": "HTMLInputElement"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasSlotController",
                "value": {}
              },
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "isPasswordVisible",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "type",
                "description": "The input's type.",
                "value": {
                  "type": "| 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'time'\n    | 'url'"
                }
              },
              {
                "name": "state",
                "description": "The input's feedback status using manual validation. Alternatively, you can use the invalid attribute",
                "value": {
                  "type": "'error' | 'warning' | 'success'"
                }
              },
              {
                "name": "size",
                "description": "The input's size.",
                "value": {
                  "type": "'small' | 'medium' | 'large'"
                }
              },
              {
                "name": "name",
                "description": "The input's name attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "description": "The input's value attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "filled",
                "description": "Draws a filled input.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "pill",
                "description": "Draws a pill-style input with rounded edges.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "label",
                "description": "The input's label. Alternatively, you can use the label slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "helpText",
                "description": "The help text below the input. Alternatively, you can use the help-text slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "helpTip",
                "description": "The help tooltip appended to the label. Alternatively, you can use the help-tip slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "clearable",
                "description": "Adds a clear button when the input is populated.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "togglePassword",
                "description": "Adds a password toggle button to password inputs.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "placeholder",
                "description": "The input's placeholder text.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the input.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "readonly",
                "description": "Makes the input readonly.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "restricted",
                "description": "Replaces the input with a plain text string.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "minlength",
                "description": "The minimum length of input that will be considered valid.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "maxlength",
                "description": "The maximum length of input that will be considered valid.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "min",
                "description": "The input's minimum value.",
                "value": {
                  "type": "number | string"
                }
              },
              {
                "name": "max",
                "description": "The input's maximum value.",
                "value": {
                  "type": "number | string"
                }
              },
              {
                "name": "step",
                "description": "The input's step attribute.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "pattern",
                "description": "A pattern to validate input against.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "required",
                "description": "Makes the input a required field.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "invalid",
                "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "autovalidate",
                "description": "Use the browsers built constraint validation API in tandem with `required`, `pattern`, `minlength` and `maxlength` values",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "autocapitalize",
                "description": "The input's autocapitalize attribute.",
                "value": {
                  "type": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
                }
              },
              {
                "name": "autocorrect",
                "description": "The input's autocorrect attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "autocomplete",
                "description": "The input's autocomplete attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "autofocus",
                "description": "The input's autofocus attribute.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "enterkeyhint",
                "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
                "value": {
                  "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
                }
              },
              {
                "name": "spellcheck",
                "description": "Enables spell checking on the input.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "inputmode",
                "description": "The input's inputmode attribute.",
                "value": {
                  "type": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
                }
              },
              {
                "name": "valueAsDate",
                "description": "Gets or sets the current value as a `Date` object. Only valid when `type` is `date`.",
                "value": {}
              },
              {
                "name": "valueAsNumber",
                "description": "Gets or sets the current value as a number.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the input.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the input.",
                "value": {}
              },
              {
                "name": "select",
                "description": "Selects all the text in the input.",
                "value": {}
              },
              {
                "name": "setSelectionRange",
                "description": "Sets the start and end positions of the text selection (0-based).",
                "value": {}
              },
              {
                "name": "setRangeText",
                "description": "Replaces a range of text with a new string.",
                "value": {}
              },
              {
                "name": "reportValidity",
                "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleChange",
                "value": {}
              },
              {
                "name": "handleClearClick",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleInput",
                "value": {}
              },
              {
                "name": "handleInvalid",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              },
              {
                "name": "handlePasswordToggle",
                "value": {}
              },
              {
                "name": "handleValueChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:change",
                "description": "Emitted when an alteration to the control's value is committed by the user."
              },
              {
                "name": "on:clear",
                "description": "Emitted when the clear button is activated."
              },
              {
                "name": "on:input",
                "description": "Emitted when the control receives input and its value changes."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the control gains focus."
              },
              {
                "name": "on:blur",
                "description": "Emitted when the control loses focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "type",
              "description": "The input's type.",
              "value": {
                "type": "| 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'time'\n    | 'url'"
              }
            },
            {
              "name": "state",
              "description": "The input's feedback status using manual validation. Alternatively, you can use the invalid attribute",
              "value": {
                "type": "'error' | 'warning' | 'success'"
              }
            },
            {
              "name": "size",
              "description": "The input's size.",
              "value": {
                "type": "'small' | 'medium' | 'large'"
              }
            },
            {
              "name": "name",
              "description": "The input's name attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The input's value attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "filled",
              "description": "Draws a filled input.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "pill",
              "description": "Draws a pill-style input with rounded edges.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "label",
              "description": "The input's label. Alternatively, you can use the label slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "help-text",
              "description": "The help text below the input. Alternatively, you can use the help-text slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "help-tip",
              "description": "The help tooltip appended to the label. Alternatively, you can use the help-tip slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "clearable",
              "description": "Adds a clear button when the input is populated.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "toggle-password",
              "description": "Adds a password toggle button to password inputs.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "placeholder",
              "description": "The input's placeholder text.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the input.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "readonly",
              "description": "Makes the input readonly.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "restricted",
              "description": "Replaces the input with a plain text string.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "minlength",
              "description": "The minimum length of input that will be considered valid.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "maxlength",
              "description": "The maximum length of input that will be considered valid.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "min",
              "description": "The input's minimum value.",
              "value": {
                "type": "number | string"
              }
            },
            {
              "name": "max",
              "description": "The input's maximum value.",
              "value": {
                "type": "number | string"
              }
            },
            {
              "name": "step",
              "description": "The input's step attribute.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "pattern",
              "description": "A pattern to validate input against.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "required",
              "description": "Makes the input a required field.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "autovalidate",
              "description": "Use the browsers built constraint validation API in tandem with `required`, `pattern`, `minlength` and `maxlength` values",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "autocapitalize",
              "description": "The input's autocapitalize attribute.",
              "value": {
                "type": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              }
            },
            {
              "name": "autocorrect",
              "description": "The input's autocorrect attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "autocomplete",
              "description": "The input's autocomplete attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "autofocus",
              "description": "The input's autofocus attribute.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "enterkeyhint",
              "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
              "value": {
                "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              }
            },
            {
              "name": "spellcheck",
              "description": "Enables spell checking on the input.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "inputmode",
              "description": "The input's inputmode attribute.",
              "value": {
                "type": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              }
            }
          ]
        },
        {
          "name": "lynk-menu",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-menu",
          "js": {
            "properties": [
              {
                "name": "menu",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "defaultSlot",
                "value": {
                  "type": "HTMLSlotElement"
                }
              },
              {
                "name": "typeToSelectString",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "typeToSelectTimeout",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "getAllItems",
                "value": {}
              },
              {
                "name": "typeToSelect",
                "description": "Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing.\nThe event passed will be used to append the appropriate characters to the internal query and the selection will be\nupdated. After a brief period, the internal query is cleared automatically. This is useful for enabling\ntype-to-select behavior when the menu doesn't have focus.",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              },
              {
                "name": "handleKeyUp",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              },
              {
                "name": "handleMouseDown",
                "value": {}
              },
              {
                "name": "handleSlotChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:select",
                "description": "Emitted when a menu item is selected."
              }
            ]
          },
          "attributes": []
        },
        {
          "name": "lynk-menu-item",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-menu-item",
          "js": {
            "properties": [
              {
                "name": "cachedTextLabel",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "defaultSlot",
                "value": {
                  "type": "HTMLSlotElement"
                }
              },
              {
                "name": "menuItem",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "checked",
                "description": "Draws the item in a checked state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "value",
                "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Draws the menu item in a disabled state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "getTextLabel",
                "description": "Returns a text label based on the contents of the menu item's default slot.",
                "value": {}
              },
              {
                "name": "handleCheckedChange",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "handleDefaultSlotChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:label-change",
                "description": "Emitted when the menu item's text label changes. For performance reasons, this event is only emitted if the default slot's `slotchange` event is triggered. It will not fire when the label is first set."
              }
            ]
          },
          "attributes": [
            {
              "name": "checked",
              "description": "Draws the item in a checked state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "value",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Draws the menu item in a disabled state.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-menu-label",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-menu-label",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "name": "lynk-mutation-observer",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-mutation-observer",
          "js": {
            "properties": [
              {
                "name": "mutationObserver",
                "value": {
                  "type": "MutationObserver"
                }
              },
              {
                "name": "attr",
                "description": "Watches for changes to attributes. To watch only specific attributes, separate them by a space, e.g.\n`class id title`. To watch all attributes, use `*`.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "attrOldValue",
                "description": "Indicates whether or not the attribute's previous value should be recorded when monitoring changes.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "charData",
                "description": "Watches for changes to the character data contained within the node.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "charDataOldValue",
                "description": "Indicates whether or not the previous value of the node's text should be recorded.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "childList",
                "description": "Watches for the addition or removal of new child nodes.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the observer.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "handleChange",
                "value": {}
              },
              {
                "name": "handleMutation",
                "value": {}
              },
              {
                "name": "startObserver",
                "value": {}
              },
              {
                "name": "stopObserver",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:mutation",
                "description": "Emitted when a mutation occurs."
              }
            ]
          },
          "attributes": [
            {
              "name": "attr",
              "description": "Watches for changes to attributes. To watch only specific attributes, separate them by a space, e.g.\n`class id title`. To watch all attributes, use `*`.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "attr-old-value",
              "description": "Indicates whether or not the attribute's previous value should be recorded when monitoring changes.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "char-data",
              "description": "Watches for changes to the character data contained within the node.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "char-data-old-value",
              "description": "Indicates whether or not the previous value of the node's text should be recorded.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "child-list",
              "description": "Watches for the addition or removal of new child nodes.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the observer.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-progress-bar",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-progress-bar",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "value",
                "description": "The current progress, 0 to 100.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "indeterminate",
                "description": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "label",
                "description": "A custom label for the progress bar's aria label.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "lang",
                "description": "The locale to render the component in.",
                "value": {
                  "type": "string"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "value",
              "description": "The current progress, 0 to 100.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "indeterminate",
              "description": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "label",
              "description": "A custom label for the progress bar's aria label.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "lang",
              "description": "The locale to render the component in.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "lynk-progress-ring",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-progress-ring",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "indicator",
                "value": {
                  "type": "SVGCircleElement"
                }
              },
              {
                "name": "indicatorOffset",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "description": "The current progress, 0 to 100.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "label",
                "description": "A custom label for the progress ring's aria label.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "lang",
                "description": "The locale to render the component in.",
                "value": {
                  "type": "string"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "value",
              "description": "The current progress, 0 to 100.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "label",
              "description": "A custom label for the progress ring's aria label.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "lang",
              "description": "The locale to render the component in.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "lynk-radio",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-radio",
          "js": {
            "properties": [
              {
                "name": "input",
                "value": {
                  "type": "HTMLInputElement"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "name",
                "description": "The radio's name attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "description": "The radio's value attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the radio.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "checked",
                "description": "Draws the radio in a checked state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "invalid",
                "description": "This will be true when the control is in an invalid state. Validity in radios is determined by the message provided\nby the `setCustomValidity` method.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "click",
                "description": "Simulates a click on the radio.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the radio.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the radio.",
                "value": {}
              },
              {
                "name": "reportValidity",
                "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleCheckedChange",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:blur",
                "description": "Emitted when the control loses focus."
              },
              {
                "name": "on:change",
                "description": "Emitted when the control's checked state changes."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the control gains focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "name",
              "description": "The radio's name attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The radio's value attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the radio.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "checked",
              "description": "Draws the radio in a checked state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "This will be true when the control is in an invalid state. Validity in radios is determined by the message provided\nby the `setCustomValidity` method.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-radio-button",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-radio-button",
          "js": {
            "properties": [
              {
                "name": "input",
                "value": {
                  "type": "HTMLInputElement"
                }
              },
              {
                "name": "hiddenInput",
                "value": {
                  "type": "HTMLInputElement"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasSlotController",
                "value": {}
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "name",
                "description": "The radio's name attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "description": "The radio's value attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the radio.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "checked",
                "description": "Draws the radio in a checked state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "invalid",
                "description": "This will be true when the control is in an invalid state. Validity in radios is determined by the message provided\nby the `setCustomValidity` method.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "click",
                "description": "Simulates a click on the radio.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the radio.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the radio.",
                "value": {}
              },
              {
                "name": "reportValidity",
                "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleCheckedChange",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "size",
                "description": "The button's size.",
                "value": {
                  "type": "'small' | 'medium' | 'large'"
                }
              },
              {
                "name": "pill",
                "description": "Draws a pill-style button with rounded edges.",
                "value": {
                  "type": "boolean"
                }
              }
            ],
            "events": [
              {
                "name": "on:blur",
                "description": "Emitted when the button loses focus."
              },
              {
                "name": "on:change",
                "description": "Emitted when the button's checked state changes."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the button gains focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "name",
              "description": "The radio's name attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The radio's value attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the radio.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "checked",
              "description": "Draws the radio in a checked state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "This will be true when the control is in an invalid state. Validity in radios is determined by the message provided\nby the `setCustomValidity` method.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "size",
              "description": "The button's size.",
              "value": {
                "type": "'small' | 'medium' | 'large'"
              }
            },
            {
              "name": "pill",
              "description": "Draws a pill-style button with rounded edges.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-radio-group",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-radio-group",
          "js": {
            "properties": [
              {
                "name": "defaultSlot",
                "value": {
                  "type": "HTMLSlotElement"
                }
              },
              {
                "name": "hasButtonGroup",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "label",
                "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "fieldset",
                "description": "Shows the fieldset and legend that surrounds the radio group.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "getAllRadios",
                "value": {}
              },
              {
                "name": "handleRadioClick",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              },
              {
                "name": "handleSlotChange",
                "value": {}
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "label",
              "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the label slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "fieldset",
              "description": "Shows the fieldset and legend that surrounds the radio group.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-relative-time",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-relative-time",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "updateTimeout",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "isoTime",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "relativeTime",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "titleTime",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "date",
                "description": "The date from which to calculate time from.",
                "value": {
                  "type": "Date | string"
                }
              },
              {
                "name": "lang",
                "description": "The locale to use when formatting the number.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "format",
                "description": "The formatting style to use.",
                "value": {
                  "type": "'long' | 'short' | 'narrow'"
                }
              },
              {
                "name": "numeric",
                "description": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown.",
                "value": {
                  "type": "'always' | 'auto'"
                }
              },
              {
                "name": "sync",
                "description": "Keep the displayed value up to date as time passes.",
                "value": {
                  "type": "boolean"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "date",
              "description": "The date from which to calculate time from.",
              "value": {
                "type": "Date | string"
              }
            },
            {
              "name": "lang",
              "description": "The locale to use when formatting the number.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "format",
              "description": "The formatting style to use.",
              "value": {
                "type": "'long' | 'short' | 'narrow'"
              }
            },
            {
              "name": "numeric",
              "description": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown.",
              "value": {
                "type": "'always' | 'auto'"
              }
            },
            {
              "name": "sync",
              "description": "Keep the displayed value up to date as time passes.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-resize-observer",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-resize-observer",
          "js": {
            "properties": [
              {
                "name": "resizeObserver",
                "value": {
                  "type": "ResizeObserver"
                }
              },
              {
                "name": "observedElements",
                "value": {
                  "type": "HTMLElement[]"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the observer.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "handleSlotChange",
                "value": {}
              },
              {
                "name": "startObserver",
                "value": {}
              },
              {
                "name": "stopObserver",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:resize",
                "description": "Emitted when the element is resized."
              }
            ]
          },
          "attributes": [
            {
              "name": "disabled",
              "description": "Disables the observer.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-responsive-media",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-responsive-media",
          "js": {
            "properties": [
              {
                "name": "aspectRatio",
                "description": "The aspect ratio of the embedded media in the format of `width:height`, e.g. `16:9`, `4:3`, or `1:1`. Ratios not in\nthis format will be ignored.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "fit",
                "description": "Determines how content will be resized to fit its container.",
                "value": {
                  "type": "'cover' | 'contain'"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "aspect-ratio",
              "description": "The aspect ratio of the embedded media in the format of `width:height`, e.g. `16:9`, `4:3`, or `1:1`. Ratios not in\nthis format will be ignored.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "fit",
              "description": "Determines how content will be resized to fit its container.",
              "value": {
                "type": "'cover' | 'contain'"
              }
            }
          ]
        },
        {
          "name": "lynk-select",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-select",
          "js": {
            "properties": [
              {
                "name": "dropdown",
                "value": {
                  "type": "LynkDropdown"
                }
              },
              {
                "name": "control",
                "value": {
                  "type": "LynkDropdown"
                }
              },
              {
                "name": "input",
                "value": {
                  "type": "HTMLInputElement"
                }
              },
              {
                "name": "menu",
                "value": {
                  "type": "LynkMenu"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasSlotController",
                "value": {}
              },
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "menuItems",
                "value": {
                  "type": "LynkMenuItem[]"
                }
              },
              {
                "name": "resizeObserver",
                "value": {
                  "type": "ResizeObserver"
                }
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "isOpen",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "displayLabel",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "displayTags",
                "value": {
                  "type": "TemplateResult[]"
                }
              },
              {
                "name": "multiple",
                "description": "Enables multi select. With this enabled, value will be an array.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "maxTagsVisible",
                "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the select control.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "restricted",
                "description": "Replaces the select with a plain text string of the selected value.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "name",
                "description": "The select's name.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "placeholder",
                "description": "The select's placeholder text.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "state",
                "description": "The select's feedback status using manual validation. Alternatively, you can use the invalid attribute",
                "value": {
                  "type": "'error' | 'warning' | 'success'"
                }
              },
              {
                "name": "size",
                "description": "The select's size.",
                "value": {
                  "type": "'small' | 'medium' | 'large'"
                }
              },
              {
                "name": "hoist",
                "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "value",
                "description": "The value of the control. This will be a string or an array depending on `multiple`.",
                "value": {
                  "type": "string | string[]"
                }
              },
              {
                "name": "filled",
                "description": "Draws a filled select.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "pill",
                "description": "Draws a pill-style select with rounded edges.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "label",
                "description": "The select's label. Alternatively, you can use the label slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "placement",
                "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
                "value": {
                  "type": "'top' | 'bottom'"
                }
              },
              {
                "name": "helpText",
                "description": "The select's help text. Alternatively, you can use the help-text slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "helpTip",
                "description": "The select's help tooltip appended to the label. Alternatively, you can use the help-tip slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "required",
                "description": "The select's required attribute.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "clearable",
                "description": "Adds a clear button when the select is populated.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "invalid",
                "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "autovalidate",
                "description": "Use the browsers built constraint validation API  in tandem with the `required` property`",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "reportValidity",
                "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
                "value": {}
              },
              {
                "name": "getValueAsArray",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the control.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the control.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleClearClick",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              },
              {
                "name": "handleLabelClick",
                "value": {}
              },
              {
                "name": "handleMenuSelect",
                "value": {}
              },
              {
                "name": "handleMenuShow",
                "value": {}
              },
              {
                "name": "handleMenuHide",
                "value": {}
              },
              {
                "name": "handleMenuItemLabelChange",
                "value": {}
              },
              {
                "name": "handleMultipleChange",
                "value": {}
              },
              {
                "name": "handleMenuSlotChange",
                "value": {}
              },
              {
                "name": "handleTagInteraction",
                "value": {}
              },
              {
                "name": "handleValueChange",
                "value": {}
              },
              {
                "name": "resizeMenu",
                "value": {}
              },
              {
                "name": "syncItemsFromValue",
                "value": {}
              },
              {
                "name": "syncValueFromItems",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:clear",
                "description": "Emitted when the clear button is activated."
              },
              {
                "name": "on:change",
                "description": "Emitted when the control's value changes."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the control gains focus."
              },
              {
                "name": "on:blur",
                "description": "Emitted when the control loses focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "multiple",
              "description": "Enables multi select. With this enabled, value will be an array.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "max-tags-visible",
              "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the select control.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "restricted",
              "description": "Replaces the select with a plain text string of the selected value.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "name",
              "description": "The select's name.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "placeholder",
              "description": "The select's placeholder text.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "state",
              "description": "The select's feedback status using manual validation. Alternatively, you can use the invalid attribute",
              "value": {
                "type": "'error' | 'warning' | 'success'"
              }
            },
            {
              "name": "size",
              "description": "The select's size.",
              "value": {
                "type": "'small' | 'medium' | 'large'"
              }
            },
            {
              "name": "hoist",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "value",
              "description": "The value of the control. This will be a string or an array depending on `multiple`.",
              "value": {
                "type": "string | string[]"
              }
            },
            {
              "name": "filled",
              "description": "Draws a filled select.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "pill",
              "description": "Draws a pill-style select with rounded edges.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "label",
              "description": "The select's label. Alternatively, you can use the label slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "placement",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "value": {
                "type": "'top' | 'bottom'"
              }
            },
            {
              "name": "help-text",
              "description": "The select's help text. Alternatively, you can use the help-text slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "help-tip",
              "description": "The select's help tooltip appended to the label. Alternatively, you can use the help-tip slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "required",
              "description": "The select's required attribute.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "clearable",
              "description": "Adds a clear button when the select is populated.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "autovalidate",
              "description": "Use the browsers built constraint validation API  in tandem with the `required` property`",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-spinner",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-spinner",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "name": "lynk-stack",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-stack",
          "js": {
            "properties": [
              {
                "name": "horizontal",
                "description": "Stack items horizontaly",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "reverse",
                "description": "Reverse the order of stack items",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "justify",
                "description": "How to justify stack items",
                "value": {
                  "type": "'start' | 'center' | 'end' | 'between' | 'around' | 'evenly' | undefined"
                }
              },
              {
                "name": "align",
                "description": "Hot to align stack items to eachother",
                "value": {
                  "type": "'start' | 'center' | 'end' | 'stretch' | 'baseline' | undefined"
                }
              },
              {
                "name": "gap",
                "description": "The space between stack items. Use spacing tokens or any custom size.",
                "value": {
                  "type": "string"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "horizontal",
              "description": "Stack items horizontaly",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "reverse",
              "description": "Reverse the order of stack items",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "justify",
              "description": "How to justify stack items",
              "value": {
                "type": "'start' | 'center' | 'end' | 'between' | 'around' | 'evenly' | undefined"
              }
            },
            {
              "name": "align",
              "description": "Hot to align stack items to eachother",
              "value": {
                "type": "'start' | 'center' | 'end' | 'stretch' | 'baseline' | undefined"
              }
            },
            {
              "name": "gap",
              "description": "The space between stack items. Use spacing tokens or any custom size.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "lynk-switch",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-switch",
          "js": {
            "properties": [
              {
                "name": "input",
                "value": {
                  "type": "HTMLInputElement"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "name",
                "description": "The switch's name attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "description": "The switch's value attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the switch.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "required",
                "description": "Makes the switch a required field.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "checked",
                "description": "Draws the switch in a checked state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "invalid",
                "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "click",
                "description": "Simulates a click on the switch.",
                "value": {}
              },
              {
                "name": "focus",
                "description": "Sets focus on the switch.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the switch.",
                "value": {}
              },
              {
                "name": "reportValidity",
                "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleCheckedChange",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:blur",
                "description": "Emitted when the control loses focus."
              },
              {
                "name": "on:change",
                "description": "Emitted when the control's checked state changes."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the control gains focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "name",
              "description": "The switch's name attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The switch's value attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the switch.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "required",
              "description": "Makes the switch a required field.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "checked",
              "description": "Draws the switch in a checked state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-tab",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-tab",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "tab",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "attrId",
                "value": {}
              },
              {
                "name": "componentId",
                "value": {}
              },
              {
                "name": "panel",
                "description": "The name of the tab panel the tab will control. The panel must be located in the same tab group.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "active",
                "description": "Draws the tab in an active state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "closable",
                "description": "Makes the tab closable and shows a close icon.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "disabled",
                "description": "Draws the tab in a disabled state.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "lang",
                "description": "The locale to render the component in.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "focus",
                "description": "Sets focus to the tab.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the tab.",
                "value": {}
              },
              {
                "name": "handleCloseClick",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:close",
                "description": "Emitted when the tab is closable and the close button is activated."
              }
            ]
          },
          "attributes": [
            {
              "name": "panel",
              "description": "The name of the tab panel the tab will control. The panel must be located in the same tab group.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "active",
              "description": "Draws the tab in an active state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "closable",
              "description": "Makes the tab closable and shows a close icon.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "disabled",
              "description": "Draws the tab in a disabled state.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "lang",
              "description": "The locale to render the component in.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "lynk-tab-group",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-tab-group",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "tabGroup",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "body",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "nav",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "indicator",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "activeTab",
                "value": {
                  "type": "LynkTab | undefined"
                }
              },
              {
                "name": "mutationObserver",
                "value": {
                  "type": "MutationObserver"
                }
              },
              {
                "name": "resizeObserver",
                "value": {
                  "type": "ResizeObserver"
                }
              },
              {
                "name": "tabs",
                "value": {
                  "type": "LynkTab[]"
                }
              },
              {
                "name": "panels",
                "value": {
                  "type": "LynkTabPanel[]"
                }
              },
              {
                "name": "hasScrollControls",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "placement",
                "description": "The placement of the tabs.",
                "value": {
                  "type": "'top' | 'bottom' | 'start' | 'end'"
                }
              },
              {
                "name": "activation",
                "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
                "value": {
                  "type": "'auto' | 'manual'"
                }
              },
              {
                "name": "noScrollControls",
                "description": "Disables the scroll arrows that appear when tabs overflow.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "lang",
                "description": "The locale to render the component in.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "show",
                "description": "Shows the specified tab panel.",
                "value": {}
              },
              {
                "name": "getAllTabs",
                "value": {}
              },
              {
                "name": "getAllPanels",
                "value": {}
              },
              {
                "name": "getActiveTab",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              },
              {
                "name": "handleScrollToStart",
                "value": {}
              },
              {
                "name": "handleScrollToEnd",
                "value": {}
              },
              {
                "name": "updateScrollControls",
                "value": {}
              },
              {
                "name": "setActiveTab",
                "value": {}
              },
              {
                "name": "setAriaLabels",
                "value": {}
              },
              {
                "name": "syncIndicator",
                "value": {}
              },
              {
                "name": "repositionIndicator",
                "value": {}
              },
              {
                "name": "preventIndicatorTransition",
                "value": {}
              },
              {
                "name": "syncTabsAndPanels",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:tab-show",
                "description": "Emitted when a tab is shown."
              },
              {
                "name": "on:tab-hide",
                "description": "Emitted when a tab is hidden."
              }
            ]
          },
          "attributes": [
            {
              "name": "placement",
              "description": "The placement of the tabs.",
              "value": {
                "type": "'top' | 'bottom' | 'start' | 'end'"
              }
            },
            {
              "name": "activation",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
              "value": {
                "type": "'auto' | 'manual'"
              }
            },
            {
              "name": "no-scroll-controls",
              "description": "Disables the scroll arrows that appear when tabs overflow.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "lang",
              "description": "The locale to render the component in.",
              "value": {
                "type": "string"
              }
            }
          ]
        },
        {
          "name": "lynk-tab-panel",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-tab-panel",
          "js": {
            "properties": [
              {
                "name": "attrId",
                "value": {}
              },
              {
                "name": "componentId",
                "value": {}
              },
              {
                "name": "name",
                "description": "The tab panel's name.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "active",
                "description": "When true, the tab panel will be shown.",
                "value": {
                  "type": "boolean"
                }
              }
            ],
            "events": []
          },
          "attributes": [
            {
              "name": "name",
              "description": "The tab panel's name.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "active",
              "description": "When true, the tab panel will be shown.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-tag",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-tag",
          "js": {
            "properties": [
              {
                "name": "localize",
                "value": {}
              },
              {
                "name": "variant",
                "description": "The tag's variant.",
                "value": {
                  "type": "'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
                }
              },
              {
                "name": "size",
                "description": "The tag's size.",
                "value": {
                  "type": "'small' | 'medium' | 'large'"
                }
              },
              {
                "name": "pill",
                "description": "Draws a pill-style tag with rounded edges.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "removable",
                "description": "Makes the tag removable.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "handleRemoveClick",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:remove",
                "description": "Emitted when the remove button is activated."
              }
            ]
          },
          "attributes": [
            {
              "name": "variant",
              "description": "The tag's variant.",
              "value": {
                "type": "'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              }
            },
            {
              "name": "size",
              "description": "The tag's size.",
              "value": {
                "type": "'small' | 'medium' | 'large'"
              }
            },
            {
              "name": "pill",
              "description": "Draws a pill-style tag with rounded edges.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "removable",
              "description": "Makes the tag removable.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        },
        {
          "name": "lynk-textarea",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-textarea",
          "js": {
            "properties": [
              {
                "name": "input",
                "value": {
                  "type": "HTMLTextAreaElement"
                }
              },
              {
                "name": "formSubmitController",
                "value": {}
              },
              {
                "name": "hasSlotController",
                "value": {}
              },
              {
                "name": "resizeObserver",
                "value": {
                  "type": "ResizeObserver"
                }
              },
              {
                "name": "hasFocus",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "state",
                "description": "The textareas feedback status using manual validation. Alternatively, you can use the invalid attribute",
                "value": {
                  "type": "'error' | 'warning' | 'success'"
                }
              },
              {
                "name": "size",
                "description": "The textarea's size.",
                "value": {
                  "type": "'small' | 'medium' | 'large'"
                }
              },
              {
                "name": "name",
                "description": "The textarea's name attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "value",
                "description": "The textarea's value attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "filled",
                "description": "Draws a filled textarea.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "label",
                "description": "The textarea's label. Alternatively, you can use the label slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "helpText",
                "description": "The textarea's help text. Alternatively, you can use the help-text slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "helpTip",
                "description": "The help tip accompanying the label. Alternatively, you can use the help-tip slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "placeholder",
                "description": "The textarea's placeholder text.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "rows",
                "description": "The number of rows to display by default.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "resize",
                "description": "Controls how the textarea can be resized.",
                "value": {
                  "type": "'none' | 'vertical' | 'auto'"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the textarea.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "readonly",
                "description": "Makes the textarea readonly.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "restricted",
                "description": "Replaces the textarea with a plain text string.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "minlength",
                "description": "The minimum length of input that will be considered valid.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "maxlength",
                "description": "The maximum length of input that will be considered valid.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "autovalidate",
                "description": "Use the browsers built constraint validation API in tandem with the `required`, `minlength` and `maxlength` values",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "required",
                "description": "Makes the textarea a required field.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "invalid",
                "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, and `maxlength` using the browser's constraint validation API.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "autocapitalize",
                "description": "The textarea's autocapitalize attribute.",
                "value": {
                  "type": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
                }
              },
              {
                "name": "autocorrect",
                "description": "The textarea's autocorrect attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "autocomplete",
                "description": "The textarea's autocomplete attribute.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "autofocus",
                "description": "The textarea's autofocus attribute.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "enterkeyhint",
                "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
                "value": {
                  "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
                }
              },
              {
                "name": "spellcheck",
                "description": "Enables spell checking on the textarea.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "inputmode",
                "description": "The textarea's inputmode attribute.",
                "value": {
                  "type": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
                }
              },
              {
                "name": "focus",
                "description": "Sets focus on the textarea.",
                "value": {}
              },
              {
                "name": "blur",
                "description": "Removes focus from the textarea.",
                "value": {}
              },
              {
                "name": "select",
                "description": "Selects all the text in the textarea.",
                "value": {}
              },
              {
                "name": "scrollPosition",
                "description": "Gets or sets the textarea's scroll position.",
                "value": {}
              },
              {
                "name": "setSelectionRange",
                "description": "Sets the start and end positions of the text selection (0-based).",
                "value": {}
              },
              {
                "name": "setRangeText",
                "description": "Replaces a range of text with a new string.",
                "value": {}
              },
              {
                "name": "reportValidity",
                "description": "Checks for validity and shows the browser's validation message if the control is invalid.",
                "value": {}
              },
              {
                "name": "setCustomValidity",
                "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid.",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleChange",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleInput",
                "value": {}
              },
              {
                "name": "handleRowsChange",
                "value": {}
              },
              {
                "name": "handleValueChange",
                "value": {}
              },
              {
                "name": "setTextareaHeight",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:change",
                "description": "Emitted when an alteration to the control's value is committed by the user."
              },
              {
                "name": "on:input",
                "description": "Emitted when the control receives input and its value changes."
              },
              {
                "name": "on:focus",
                "description": "Emitted when the control gains focus."
              },
              {
                "name": "on:blur",
                "description": "Emitted when the control loses focus."
              }
            ]
          },
          "attributes": [
            {
              "name": "state",
              "description": "The textareas feedback status using manual validation. Alternatively, you can use the invalid attribute",
              "value": {
                "type": "'error' | 'warning' | 'success'"
              }
            },
            {
              "name": "size",
              "description": "The textarea's size.",
              "value": {
                "type": "'small' | 'medium' | 'large'"
              }
            },
            {
              "name": "name",
              "description": "The textarea's name attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "value",
              "description": "The textarea's value attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "filled",
              "description": "Draws a filled textarea.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "label",
              "description": "The textarea's label. Alternatively, you can use the label slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "help-text",
              "description": "The textarea's help text. Alternatively, you can use the help-text slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "help-tip",
              "description": "The help tip accompanying the label. Alternatively, you can use the help-tip slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "placeholder",
              "description": "The textarea's placeholder text.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "rows",
              "description": "The number of rows to display by default.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "resize",
              "description": "Controls how the textarea can be resized.",
              "value": {
                "type": "'none' | 'vertical' | 'auto'"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the textarea.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "readonly",
              "description": "Makes the textarea readonly.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "restricted",
              "description": "Replaces the textarea with a plain text string.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "minlength",
              "description": "The minimum length of input that will be considered valid.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "maxlength",
              "description": "The maximum length of input that will be considered valid.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "autovalidate",
              "description": "Use the browsers built constraint validation API in tandem with the `required`, `minlength` and `maxlength` values",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "required",
              "description": "Makes the textarea a required field.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "invalid",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, and `maxlength` using the browser's constraint validation API.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "autocapitalize",
              "description": "The textarea's autocapitalize attribute.",
              "value": {
                "type": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              }
            },
            {
              "name": "autocorrect",
              "description": "The textarea's autocorrect attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "autocomplete",
              "description": "The textarea's autocomplete attribute.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "autofocus",
              "description": "The textarea's autofocus attribute.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "enterkeyhint",
              "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
              "value": {
                "type": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              }
            },
            {
              "name": "spellcheck",
              "description": "Enables spell checking on the textarea.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "inputmode",
              "description": "The textarea's inputmode attribute.",
              "value": {
                "type": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              }
            }
          ]
        },
        {
          "name": "lynk-visually-hidden",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-visually-hidden",
          "js": {
            "properties": [],
            "events": []
          },
          "attributes": []
        },
        {
          "name": "lynk-tooltip",
          "description": "",
          "doc-url": "https://lynk.design/components/lynk-tooltip",
          "js": {
            "properties": [
              {
                "name": "positioner",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "tooltip",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "arrow",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "target",
                "value": {
                  "type": "HTMLElement"
                }
              },
              {
                "name": "hoverTimeout",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "positionerCleanup",
                "value": {
                  "type": "ReturnType<typeof autoUpdate> | undefined"
                }
              },
              {
                "name": "content",
                "description": "The tooltip's content. Alternatively, you can use the content slot.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "placement",
                "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
                "value": {
                  "type": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
                }
              },
              {
                "name": "disabled",
                "description": "Disables the tooltip so it won't show when triggered.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "distance",
                "description": "The distance in pixels from which to offset the tooltip away from its target.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "open",
                "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "skidding",
                "description": "The distance in pixels from which to offset the tooltip along its target.",
                "value": {
                  "type": "number"
                }
              },
              {
                "name": "trigger",
                "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically.",
                "value": {
                  "type": "string"
                }
              },
              {
                "name": "hoist",
                "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
                "value": {
                  "type": "boolean"
                }
              },
              {
                "name": "show",
                "description": "Shows the tooltip.",
                "value": {}
              },
              {
                "name": "hide",
                "description": "Hides the tooltip",
                "value": {}
              },
              {
                "name": "getTarget",
                "value": {}
              },
              {
                "name": "handleBlur",
                "value": {}
              },
              {
                "name": "handleClick",
                "value": {}
              },
              {
                "name": "handleFocus",
                "value": {}
              },
              {
                "name": "handleKeyDown",
                "value": {}
              },
              {
                "name": "handleMouseOver",
                "value": {}
              },
              {
                "name": "handleMouseOut",
                "value": {}
              },
              {
                "name": "handleOpenChange",
                "value": {}
              },
              {
                "name": "handleOptionsChange",
                "value": {}
              },
              {
                "name": "handleDisabledChange",
                "value": {}
              },
              {
                "name": "hasTrigger",
                "value": {}
              },
              {
                "name": "startPositioner",
                "value": {}
              },
              {
                "name": "updatePositioner",
                "value": {}
              },
              {
                "name": "stopPositioner",
                "value": {}
              }
            ],
            "events": [
              {
                "name": "on:show",
                "description": "Emitted when the tooltip begins to show."
              },
              {
                "name": "after:show",
                "description": "Emitted after the tooltip has shown and all animations are complete."
              },
              {
                "name": "on:hide",
                "description": "Emitted when the tooltip begins to hide."
              },
              {
                "name": "after:hide",
                "description": "Emitted after the tooltip has hidden and all animations are complete."
              }
            ]
          },
          "attributes": [
            {
              "name": "content",
              "description": "The tooltip's content. Alternatively, you can use the content slot.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "placement",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
              "value": {
                "type": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              }
            },
            {
              "name": "disabled",
              "description": "Disables the tooltip so it won't show when triggered.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "distance",
              "description": "The distance in pixels from which to offset the tooltip away from its target.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "open",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
              "value": {
                "type": "boolean"
              }
            },
            {
              "name": "skidding",
              "description": "The distance in pixels from which to offset the tooltip along its target.",
              "value": {
                "type": "number"
              }
            },
            {
              "name": "trigger",
              "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically.",
              "value": {
                "type": "string"
              }
            },
            {
              "name": "hoist",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
              "value": {
                "type": "boolean"
              }
            }
          ]
        }
      ]
    }
  }
}